 <?php

/**
 * @file
 *
 * @author Team Innovation
 */
 
 /**
 * Implementation of hook_field_vote_count_compute()
 *
 * count total number of votes for a particular node.
 *
 */
  function computed_field_field_vote_count_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
    if (!$entity->nid) {
      node_save($entity);
    }
    $entity_field[0]['value'] = $entity->nid;
    return $entity_field[0]['value'];
  }
  

  function computed_field_field_vote_count_display($field, $entity_field_item, $entity_lang, $langcode) {
    $select = db_query('select count(tag) from sc_votingapi_vote where tag = :lang and entity_id = :ent', array(':lang'=>'Language',':ent'=>$entity_field_item['value']));
    $number = 	$select->fetchField();
    $_SESSION['vote_count'] = $number;
    return $number;
  }
  
/**
 * Implementation of hook_field_overall_compute()
 *
 * Browse all the votes and calculate average/overall
 * of it.
 *
 */
  function computed_field_field_overall_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
    $count = 0; //Set counter to 0
    /*Browse all the fields and record its votes*/
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'narrative')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'characters')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'language')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'plot')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }	
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'engagement')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'realism')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'novelty')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    if($axis = fivestar_get_votes($entity_type, $entity->nid, 'composition')) {
      if(isset($axis['average']['value'])) {
        $avg_axix[$count] = $axis['average']['value'];
        $count ++;
      }
    }
    /* Calculating overall/average */
    $total = 0;
    for($i = 0; $i < $count; $i++) {
      $total += $avg_axix[$i];
    }
    if($count > 0 )
      $entity_field[0]['value'] = ($total) / $count;
    else
      $entity_field[0]['value'] = 0;
    return $entity_field[0]['value'];   // Return overall/average value
  }
  
  function computed_field_field_overall_display($field, $entity_field_item, $entity_lang, $langcode) {
    $moyenne = $entity_field_item['value'];
    $variables = array("rating" => $moyenne, "stars" => 5);
    $variables["widget"]["name"] = "oxygen"; 
    $variables["widget"]["css"] = "sites/all/modules/fivestar/widgets/oxygen/oxygen.css";
    drupal_add_css(drupal_get_path('module', 'fivestar') .'/css/fivestar.css');
    $node = menu_get_object();
    $select = db_query('select count(tag) from sc_votingapi_vote where tag = :lang and entity_id = :ent', array(':lang'=>'Language',':ent'=>$node->nid));
    $number = 	$select->fetchField();
    return theme('fivestar_static', $variables) . "<div class = 'left-pull votes'><div  style = 'display:none;' itemprop='aggregateRating'    itemscope itemtype='http://schema.org/AggregateRating'>   Rated <span itemprop='ratingValue'>".number_format($entity_field_item['value']/20, 1, '.', '')."</span>/5   based on <span itemprop='reviewCount'>".$number."</span> customer reviews  </div>".number_format($entity_field_item['value']/20, 1, '.', '') . "/5</div>";
  }
  
  /*$css = ".field-type-fivestar {
			width:50%;
			float:left;
		  }
		  .field-name-field-overall {
		  	clear:both;
		  }
		  .field-name-field-overall > .field-items {
		  	width:50%;
		  }";
  drupal_add_css($css,'inline');*/
  
/**
 * Implementation of hook_field_comment_count_compute()
 *
 * count total number of comments for a particular node.
 *
 */
  function computed_field_field_comment_count_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
    if (!$entity->nid) {    //If node is new
      node_save($entity);   // save new node
    }
    $entity_field[0]['value'] = $entity->nid;   //Return node id
    return $entity_field[0]['value'];
  }
  
  function computed_field_field_comment_count_display($field, $entity_field_item, $entity_lang, $langcode) {
    $select = db_query('select comment_count from sc_node_comment_statistics where nid ='.$entity_field_item['value']);
    $number = 	$select->fetchField();
    return $number;
  }
  
/**
 * Implementation of hook_field_view_count_compute()
 *
 * count total number of views for a particular node.
 *
 */
  function computed_field_field_view_count_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
    if (!$entity->nid) {
      node_save($entity);
    }
    $entity_field[0]['value'] = $entity->nid;
    return $entity_field[0]['value'];
  }
  
  function computed_field_field_view_count_display($field, $entity_field_item, $entity_lang, $langcode) {
    global $user;
    $node = menu_get_object();
    /*if($node->uid == $user->uid) {
      $select = db_query('UPDATE sc_node_counter set totalcount = totalcount-1 where nid ='.$entity_field_item['value']);
    }
    $select = db_query('select totalcount from sc_node_counter where nid ='.$entity_field_item['value']);
    $number = 	$select->fetchField();		
    return $number;*/
    /* Page views from Google Analytics */
    $page_views = db_query("SELECT SUM(pageviews) as pageviews FROM {google_analytics_data} WHERE nid = :nid", array(":nid" => $entity_field_item['value']))->fetchAssoc();	
    return $page_views['pageviews'];
  }
  
  
  
/**
 * Adult Content Restriction
 * 
 * Implementation of hook_node_access()
 *
 * Restricts contect access according to users age.
 */
  function scribaya_custom_module_node_access($node, $op, $account) {
    global $user;
    $current_state = workflow_get_workflow_states_by_sid(workflow_node_current_state($node));
    if ($current_state->state == "Published" && $node->status == 0 && $node->uid != $user->uid) {
      return NODE_ACCESS_DENY;
    }
    if($node->type == "post_content" && $op == 'view') {
      if($node->uid == $user->uid)
        return NODE_ACCESS_ALLOW;
      $taxonomy_term = $node->field_adult_content_rating_new['und'][0]['tid'];
      if( $taxonomy_term == 16 || $taxonomy_term == 17 ) {
        if( ! user_is_logged_in()) {    // Is user Anonymous
          $_SESSION['destination'] = drupal_get_destination();
          $_SESSION['underage_flag'] = 1;
          /* Allow searchBots to access page */
          $spiderSearch = array(
            "GoogleBot"=>"Googlebot",
            "MsnBot"=>"msnbot",
            "Yahoo! Slurp"=>"Slurp",
            "BingBot"=>"bingbot"
          );
          $isSpider = false;
          foreach($spiderSearch as $name=>$val) {
            if(preg_match('/'.$val.'/i',$_SERVER['HTTP_USER_AGENT'])) {
              $isSpider = true;
              break;
            }			
          }
          if($isSpider == false) {
            return NODE_ACCESS_DENY;    // If user is not a Bot of search engines defined above, then deny access to the same.
          }
        }else { // If user is registered
          /* Calculate age of loggedin user */
          $age = db_query("SELECT DATEDIFF(CURRENT_DATE, field_dob_value)/365 FROM sc_field_data_field_dob where entity_id = ".$user->uid)->fetchField();
          if($age) {
            $_SESSION['age'] = $age;
            if($age < 13) {
              $_SESSION['underage'] = 13;
              $_SESSION['underage_flag'] = 1;
              return NODE_ACCESS_DENY;
            }
            elseif($taxonomy_term == 17 && $age <= 18) {
              $_SESSION['underage'] = 18;
              $_SESSION['underage_flag'] = 1;
              return NODE_ACCESS_DENY;
            }
          }
        }
      }
    }
    return NODE_ACCESS_IGNORE;  // Allow access to the node
  }
  
/**
 * Implementation of hook_form_alter()
 *
 * Performs multiple operations on forms
 */
  function scribaya_custom_module_form_alter(&$form, &$form_state) {
    
    /* Alter post-content add/edit form */
    if($form['#id'] == 'post-content-node-form') {
      /* Change Publish button to Publish and Share in add new post form */
      if($form['nid']['#value'] == "")
        $form['actions']['submit']['#value'] = 'Publish and Share';
      /****** Set default collection on new post ******/
      if($_GET['type'] == "poems" || $_GET['type'] == "story" || $form['#node']->field_type['und'][0]['tid'] == 21 || $form['#node']->field_type['und'][0]['tid'] == 20) {
        $form['field_novels']['#access'] = FALSE;   // Disable Novels field
        if($form['field_collection']['und'][0]['nid']['#default_value'] == "") {
          global $user;
          $select = db_query("SELECT nid from sc_node where type='collection' and title='Default' and uid = ".$user->uid);
          $form['field_collection']['und'][0]['nid']['#default_value'] = $select->fetchField();
        }
      }elseif($_GET['type'] == 'novel' || $form['#node']->field_type['und'][0]['tid'] == 22) {
        $form['field_collection']['#access'] = FALSE;   // Disable Collection field
        if($form['field_novels']['und'][0]['nid']['#default_value'] == "") {
          global $user;
          $select = db_query("SELECT nid from sc_node where type='collection' and title='Default Novel' and uid = ".$user->uid);
          $form['field_novels']['und'][0]['nid']['#default_value'] = $select->fetchField();
        }
      }
    }

    /* Alert user that all this posts in the collection will also be deleted */
    if($form['#form_id']== 'node_delete_confirm' && $form['#node']->type == 'collection') {
      if($form['#node']->title == 'Default' || $form['#node']->title == 'Default Novel') {
	$form['description']['#markup'] = '<div>This is a default collection. It cannot be deleted.</div>';
	$form['actions']['#type'] = 'hidden';
      }else {
        $form['description']['#markup'] = '<div>This action cannot be undone. All the <span style="font-weight:700">articles</span> present in 	this collection will be <span style="font-weight:700">deleted</span>.</div>';
      }
    }
    
    /* Alter user profile form. */
    if ($form['#id'] == 'user-profile-form') {
      $form['legal']['#access'] = FALSE;    // Hide legal Aggrement from user profile page.
      drupal_add_js(drupal_get_path('module', 'scribaya_custom_module') .'/js/limit_userpic_upload.js', 'file');    // Add limit to user profile picture.
      unset($form['contact']);  // Unset user contact form.
    }
	
    /* Alter collection add/edit form */
    if ($form['#id'] == 'collection-node-form')	{
      //$form_state['no_cache'] = TRUE;	// trun off cache
      $form['#after_build'][] = 'fn_after_build';
      //$form['#pre_render'][] = 'mymodule_after_build';
      if($form['title']['#default_value'] == 'Default' || $form['title']['#default_value'] == 'Default Novel') {
	$form['title']['#attributes']['readonly'] = 'readonly';  // Make title Readonly for 'Default' Collection 
	$form['actions']['delete']['#type'] = 'hidden';
      }
      $form['actions']['draft']['#access'] = FALSE; // Disable draft botton
      /* Restrict user, dont allow him/her to change is_novel value once created */
      if($form['nid']['#value']) {
        $form['field_is_novel']['#access'] = FALSE;
      }
      /* Disable field for storing reference of novels/collections */
      if(isset($form[nid]['#value'])) {
        if($form['field_is_novel']['und']['#default_value']) {
          $form['field_articles_in_this_collectio']['#access'] = FALSE;
        } elseif (!$form['field_is_novel']['und']['#default_value']) {
          $form['field_novels_in_this_collection']['#access'] = FALSE;
        }
      } else {
         // drupal_add_js(drupal_get_path('module', 'scribaya_custom_module') .'/js/toggle_fields_in new_collection.js', 'file');
      }
    }
	
    /* Disable WYSIWYG for mobile devices */
    if ($form['#id'] == 'comment-form') {
      $useragent=$_SERVER['HTTP_USER_AGENT'];
      if(preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i',$useragent)||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($useragent,0,4))) {
        $form['comment_body']['und'][0]['#wysiwyg'] = FALSE;
      }else {
        $form['comment_body']['und'][0]['#wysiwyg'] = TRUE;
      }
    }

    /* Menu Sign in options */
    if($form['#id'] == 'user-login' || $form['#id'] == 'user-login--1' || $form['#id'] == 'user-login--2' || $form['#id'] == 'user-login--3' || $form['#id'] == 'user-login--5' || $form['#id'] == 'user-login--4') {
            $form['#action'] = '/signup';
    }
  }
  
  /* After build fn to handle collection addition */
  function fn_after_build($form, $form_state) {
    drupal_add_js(drupal_get_path('module', 'scribaya_custom_module') .'/js/toggle_fields_in new_collection.js', 'file');
    return $form;
  }
 
/**
  * Implementation of hook_node_validate()
  *
  * Performs custom valiadtions of the form 
  */
  function scribaya_custom_module_node_validate($node, $form, &$form_state) {
    if($form['#id'] == 'collection-node-form')
      if((trim($form['title']['#value']) == 'Default' || trim($form['title']['#value']) == 'Default Novel') && $form['title']['#attributes']['readonly'] != 'readonly')
        form_set_error('title', t('You cannot create a collection with the title.'));
  }

/**
 * Implementation of hook_node_load()
 *
 * Performs various functions on node load.
 *
 */
  function scribaya_custom_module_node_load($nodes,$types) {
    /* Set fonts of text based on certain conditions */
    $url = $_SERVER['REQUEST_URI'];
    $url = explode('/',$url);

      drupal_add_css('#article_container{ font-family:Kameron,serif; font-size:0.95em; } #article_container:first-letter { float: left; font-family: Kameron,serif; font-size: 450%; line-height: 0.85em; margin-right: 0.03em; margin-bottom:-0.25em;}','inline');

    if($url[1] == 'poem')
      drupal_add_css('#article_container{ font-family:Kameron,serif; font-size:0.95em; width:50%; margin:0 auto;} #article_container:first-letter { float: none; font-family: Kameron,serif; font-size: 0.95em; line-height: initial; margin:0;}','inline');

    /* Add custom js file based on users role */
    global $user;
    if($user->uid != 0)
      drupal_add_js(drupal_get_path('module', 'scribaya_custom_module') .'/js/scribaya_custom_module.js', 'file');
    else
      drupal_add_js(drupal_get_path('module', 'scribaya_custom_module') .'/js/scribaya_custom_module_loggedout_user.js', 'file');
  }

/**
 * Implementation of hook_menu()
 *
 * Declaring an ajax function to handel users votes, get node id,
 * Get genres and tags for collectios.
 */
  function scribaya_custom_module_menu() {
    return array(
      'vote/register/ajax' => array(    // Callback to register users votes.
      'page callback' => 'vote_register_ajax_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      ),
      'get/node/id' => array(   // Callback for getting node id.
      'page callback' => 'get_node_id_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      ),
      'collection_genre' => array(  // Callback for getting details (genre and tags) of collection.
      'title' => 'Collection Genre',
      'page callback' => 'collection_genre_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      ),
    );
  }
  
/**
 *
 * Writing callback fn for users voting.
 *
 */
  function vote_register_ajax_callback() {
    $alias = explode('/',drupal_get_normal_path($_POST['url']));	// Get node_id from alias name
    $average = array();
    foreach($_POST['votes'] as $key => $value) {
      $votes = _fivestar_cast_vote('node', $alias[1], $value, $key);	// Registering all the users votes in the database.
      $var = fivestar_get_votes('node',$alias[1],$key);                 // Get updated votes
      array_push($average,$var['average']['value']);                    // Store average votes
    }
    db_query("DELETE FROM sc_cache_field WHERE cid = 'field:node:".$alias[1]."'");
    $avg = ((array_sum($average)/count($average))*(5/100));	// Calculate average of all the parameters
    $num_updated = db_update('field_data_field_overall')
      ->fields(array(
      'field_overall_value' => (array_sum($average)/count($average)),
    ))
    ->condition('entity_id',$alias[1], '=')
    ->execute();
    return drupal_json_output(array('op'=>number_format($avg, 1, '.', ''),'a'=>$_POST['votes'],'node_id'=>$alias,'id'=>array_sum($average)));	// Return average
  }

/**
 *
 * Writing callback fn for getting node id.
 *
 */
  function get_node_id_callback() {
    $alias = explode('/',drupal_get_normal_path($_POST['url']));	// Get node_id from alias name
    return drupal_json_output(array('node_id'=>$alias[1]));
  }
  
/**
 *
 * Writing callback fn for getting genres and tags of selected collection.
 *
 */
  function collection_genre_callback() {
    $collection_name = $_POST['collection_name'];	// Get name of collection selected by user
    global $user;
    $genre_list = array();
    $tag_list = array();
    $node_nid = db_query("SELECT nid from sc_node where type= :type and title= :title and uid= :uid", array(':type'=>'Collection',':title'=>$collection_name,':uid'=>$user->uid))->fetchField();	// Getting node->id from db	
    $genres = db_query("SELECT field_genres_new_tid from sc_field_data_field_genres_new where entity_id = :entityid",array(':entityid'=>$node_nid))->fetchAll();	// Getting genre based on nid
    /* Storing all genres in a variable */
    foreach ($genres as $value) {
      array_push($genre_list,$value->field_genres_new_tid);
    }	
    $tags = db_query("SELECT field_tags_tid from sc_field_data_field_tags where entity_id = :entityid",array(':entityid'=>$node_nid))->fetchAll();	// Getting tags based on nid
    /* Storing all tags in a variable */
    foreach ($tags as $value) {
      $tag_name = db_query("SELECT name from sc_taxonomy_term_data where tid = :entityid",array(':entityid'=>$value->field_tags_tid))->fetchField();	// Getting tag names based on tid
      array_push($tag_list,$tag_name);	/* Storing all tag names in a variable */
    }
    return drupal_json_output(array('tag'=>$tag_list,'genre'=>$genre_list));	// Return tag names and genres to user.
  }
  
/**
 *
 * Remove Delete option from Location Module
 *
 */
  function scribaya_custom_module_location_element_alter(&$element) {
    unset($element['delete_location']);
  }

/**
 *
 * Hook to execute when collection delete is triggered
 *
 */
  function scribaya_custom_module_node_delete($node) {
    if ($node->type == 'collection') {
      $node_nids = array();
      foreach ($node->field_articles_in_this_collectio[LANGUAGE_NONE] as $orphan_node) {
        $node_nids[] = $orphan_node['nid'];
      }  
      node_delete_multiple($node_nids);
    }
  }
